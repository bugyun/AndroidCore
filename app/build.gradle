apply plugin: 'com.android.application'


def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "com.finupgroup.androidcore"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                // 配置CMake可选参数
                arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"

                // 为C 编译器设置可选 flags
                cFlags "-D_EXAMPLE_C_FLAG1", "-D_EXAMPLE_C_FLAG2"

                // 为c++编译器设置flag ：使支持格式化 macro constants
                cppFlags "-D__STDC_FORMAT_MACROS"
            }

        }
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            // abiFilters 后面的ABI类型即为要打包进apk的ABI类型，除此以外都不打包进apk里
            abiFilters 'armeabi'//, 'armeabi-v7a', 'x86', 'x86_64', 'arm64-v8a'
        }


    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug { // debug模式
            buildConfigField "int", "LOG_LEVEL", "6"//全部显示log日志
            buildConfigField "boolean", "IS_DEBUG", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.config
        }
        release {
            buildConfigField "int", "LOG_LEVEL", "0"//不显示log日志
            buildConfigField "boolean", "IS_DEBUG", "false"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config

//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        // 输出apk名称为boohee_v1.0_2015-01-15_wandoujia.apk
//                        def fileName = "Bestbuy_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
        }
    }

    compileOptions {
        sourceCompatibility SOURCE_COMPATIBILITY
        targetCompatibility TARGET_COMPATIBILITY
    }

    dexOptions {
        javaMaxHeapSize JAVA_MAX_HEAPSIZE

    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {    // 取消掉系统对.9图片的检查
        cruncherEnabled = false
        useNewCruncher = false

    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    //多渠道打包
    productFlavors {
        bestbuy {}// 官网包
        umeng {}//友盟推送更新
        _360 {}//360
        tencent {}//腾讯
        baidu {}//百度
        _91 {}//
        wandoujia {}//豌豆荚
        anzhuo {}//
        anzhi {}//
        jifeng {}//
        yingyonghui {}//应用汇
        mumayi {}
        nduoa {}
        googleplay {}
        suning {}//
        sogou {}
        zhongyong {}//众用助手
        MMshequ {}//MM社区
        uc {}
        liantong {}//联通沃社区
        xiaomi {}//xiaomi
        lenovomm {}
        Mstore {}//魅族Mstore
        huawei {}//
        zhongxing {}//中兴
        oppope {}
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [BUGLY_APP_CHANNEL: name]
    }


    splits {//拆分apk
        abi {//把一个apk拆成几个apk，每个apk仅包含特定的ABI
            enable true//是否启用拆分
            reset()// include和exclude之前先reset一下
            include 'armeabi'//, 'armeabi-v7a'  // 指定只包含的abi库
            universalApk false   // 指定不产生一个包含所有abi的apk
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':baselibrary')
    compile project(':counttime')
    compile project(':httpbird')
    compile 'com.android.support:appcompat-v7:26.+'

    compile 'com.android.support:design:26.+'

    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.github.zhaokaiqiang.klog:library:1.6.0'
    compile 'com.tencent.bugly:crashreport:latest.release'
    compile 'com.gyf.barlibrary:barlibrary:2.2.2'
    testCompile 'junit:junit:4.12'
}
